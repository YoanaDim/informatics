import java.util.Scanner;
import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Main {

    // Product class with name, price, and quantity
    class Product {
        private String name;
        private double price;
        private int quantity;

        public Product(String name, double price, int quantity) {
            this.name = name;
            this.price = price;
            this.quantity = quantity;
        }

        public String getProductName() {
            return name;
        }

        public double getProductPrice() {
            return price;
        }

        public int getProductQuantity() {
            return quantity;
        }

        public void getPrice(double price) {
            this.price = price;
        }

        public void getQuantity(int quantity) {
            this.quantity = quantity;
        }

        public void getName(String name) {
            this.name = name;
        }
    }

    // Frame for the GUI
    private JFrame frame;

    // Text fields for product details
    private JTextField nameField;
    private JTextField quantityField;
    private JTextField priceField;
    private JTextField updateNameField;


    Font basicButton = new Font("Comic Sans", Font.BOLD, 40);
    Font basicBoxFont = new Font("Comic Sans", Font.BOLD, 15);

    // Text area for displaying inventory
    private JTextArea inventoryArea;

    // Inventory storage (Simple array-based system for beginners)
    private String[] productName = new String[10];
    private int[] productQuantity = new int[10];
    private double[] productPrice = new double[10];
    private int productCount = 0;

    public static void main(String[] args) {
        EventQueue.invokeLater(() -> {
            try {
                Main window = new Main();
                window.frame.setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    // Constructor for setting up the GUI
    public Main() {
        initialize();
    }

    // Initialize the contents of the frame
    private void initialize() {
        frame = new JFrame();
        frame.setTitle("Inventory System");
        JFrame window = new JFrame("Inventory Management");
        window.setSize(1000, 800 );
        window.setLayout(new GridLayout(3, 1));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(new BorderLayout());

        JPanel panel = new JPanel();
        frame.getContentPane().add(panel, BorderLayout.NORTH);
        panel.setLayout(new GridLayout(5, 2));

        //name quantity price buttons yippieeeeeeeeeeee
        JLabel productName = new JLabel("Product Name:");
        panel.add(productName);
        productName.setFont(basicBoxFont);
        nameField = new JTextField();
        panel.add(nameField);
        productName.setFont(basicBoxFont);

        JLabel quantity = new JLabel("Quantity:");
        panel.add(quantity);
        quantity.setFont(basicBoxFont);
        quantityField = new JTextField();
        panel.add(quantityField);

        JLabel price = new JLabel("Price:");
        panel.add(price);
        price.setFont(basicBoxFont);
        priceField = new JTextField();
        panel.add(priceField);

        JLabel updateLabel = new JLabel("Product Name to Update:");
        panel.add(updateLabel);
        updateNameField = new JTextField();
        panel.add(updateNameField);
        updateLabel.add(quantityField);

        // Create buttons for adding product, updating product, and displaying inventory
        JPanel buttonPanel = new JPanel();
        frame.getContentPane().add(buttonPanel, BorderLayout.CENTER);

        JButton addButton = new JButton("Add Product");
        addButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                addProduct();
            }
        });


        buttonPanel.add(addButton);

        JButton updateButton = new JButton("Update Product");
        updateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                updateProduct();
            }
        });
        buttonPanel.add(updateButton);

        JButton displayButton = new JButton("Display Inventory");
        displayButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                displayInventory();
            }
        });
        buttonPanel.add(displayButton);

        //display inventory
        inventoryArea = new JTextArea();
        inventoryArea.setEditable(false);
        frame.getContentPane().add(new JScrollPane(inventoryArea), BorderLayout.SOUTH);
    }

    //dobavi product v inventory
    private void addProduct() {
        String name = nameField.getText();
        String quantity = quantityField.getText();
        String price = priceField.getText();


        try {
            int qty = Integer.parseInt(quantity);
            double prc = Double.parseDouble(price);

            if (productCount < productName.length) {
                productName[productCount] = name;
                productQuantity[productCount] = qty;
                productPrice[productCount] = prc;
                productCount++;
            }

            //tuka ima neshto random za da se izchisti
            nameField.setText("");
            quantityField.setText("");
            priceField.setText("");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(frame, "Error", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    //update button
    private void updateProduct() {
        String nameToUpdate = updateNameField.getText();
        String quantity = quantityField.getText();
        String price = priceField.getText();

        // Clear the input fields after updating product
        updateNameField.setText("");
        quantityField.setText("");
        priceField.setText("");
    }

    //inventory??
    private void displayInventory() {
        String inventoryList = "";
        for (int i = 0; i < productCount; i++) {
            inventoryList += "Name: " + productName[i] +
                    ", Quantity: " + productQuantity[i] +
                    ", Price: $" + productPrice[i] +
                    "\n";
        }
        inventoryArea.setText(inventoryList);
    }
